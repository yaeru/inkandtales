{"version":3,"sources":["webpack:///./node_modules/apollo-utilities/lib/bundle.esm.js","webpack:///./node_modules/apollo-link-http-common/lib/bundle.esm.js","webpack:///./node_modules/apollo-link-http/lib/bundle.esm.js","webpack:///./node_modules/apollo-client/bundle.esm.js","webpack:///./node_modules/apollo-link/lib/bundle.esm.js"],"names":["isStringValue","value","kind","isBooleanValue","isIntValue","isFloatValue","isVariable","isObjectValue","isListValue","isEnumValue","isNullValue","valueToObjectRepresentation","argObj","name","variables","Number","nestedArgObj_1","fields","map","obj","variableValue","values","listValue","nestedArgArrayObj","storeKeyNameFromField","field","directivesObj","directives","forEach","directive","arguments","_a","length","getStoreKeyName","KNOWN_DIRECTIVES","fieldName","args","filterKeys","sort","queryArgs_1","filteredArgs_1","key","JSON","stringify","completeFieldName","stringifiedArgs","Object","keys","indexOf","argumentsObjectFromField","argObj_1","resultKeyNameFromField","alias","isField","selection","isInlineFragment","isIdValue","idObject","type","generated","toIdValue","idConfig","id","typename","undefined","isJsonValue","jsonObject","getDirectiveInfoFromField","directiveObj_1","shouldInclude","getInclusionDirectives","every","ifArgument","evaledValue","getDirectiveNames","doc","names","Directive","node","push","hasDirectives","some","hasClientExports","document","isInclusionDirective","filter","directiveArguments","ifValue","getFragmentQueryDocument","fragmentName","actualFragmentName","fragments","definitions","definition","query","operation","selectionSet","selections","assign","target","sources","_i","source","checkDocument","operations","d","getOperationDefinition","getOperationName","x","getFragmentDefinitions","getQueryDefinition","queryDef","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","createFragmentMap","symTable","fragment","getDefaultValues","variableDefinitions","defaultValues","defaultValue","variable","defaultValueObj","apply","filterInPlace","array","test","context","elem","i","call","this","TYPENAME_FIELD","isEmpty","op","nullIfDocIsEmpty","getDirectiveMatcher","dir","removeDirectivesFromDocument","variablesInUse","create","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","Variable","enter","_key","parent","Field","shouldRemoveField","remove","arg","getAllFragmentSpreadsFromSelectionSet","frag","FragmentSpread","v","removeArgumentsFromDocument","fs","removeFragmentSpreadFromDocument","addTypenameToDocument","SelectionSet","skip","lastIndexOf","connectionRemoveConfig","willRemove","removeConnectionDirectiveFromDocument","getArgumentMatcher","config","argument","aConfig","argMatcher","OperationDefinition","varDef","argConfig","argMatchCount_1","Argument","def","FragmentDefinition","allFragments","buildQueryFromSelectionSet","definitionOperation","removeClientSetsFromDocument","isTypenameOnly","canUseWeakMap","WeakMap","navigator","product","toString","prototype","cloneDeep","cloneDeepHelper","Map","val","seen","has","get","copy_1","slice","set","child","copy_2","getPrototypeOf","getEnv","process","isEnv","env","isProduction","isDevelopment","isTest","tryFunctionOrLogError","f","e","console","error","graphQLResultHasError","result","errors","deepFreeze","o","freeze","getOwnPropertyNames","prop","isFrozen","maybeDeepFreeze","symbolIsPolyfilled","Symbol","hasOwnProperty","mergeDeep","mergeDeepArray","count","pastCopies","shallowCopyForMerge","mergeHelper","isObject","isExtensible","sourceKey","sourceValue","targetValue","Array","isArray","__proto__","defaultHttpOptions","includeQuery","includeExtensions","defaultHeaders","accept","defaultOptions","method","fallbackHttpConfig","http","headers","options","throwServerError","response","message","Error","statusCode","status","parseAndCheckHttpResponse","text","then","bodyText","parse","err","parseError","Promise","reject","operationName","checkFetcher","fetcher","fetch","window","createSignalIfSupported","AbortController","controller","signal","selectHttpOptionsAndBody","fallbackConfig","configs","credentials","extensions","body","serializeFetchParameter","p","label","serialized","selectURI","fallbackURI","getContext","contextURI","uri","createHttpLink","linkOptions","useGETForQueries","requestOptions","linkConfig","fetchOptions","chosenURI","clientAwarenessHeaders","clientAwareness","name_1","version","contextHeaders","contextConfig","_b","_c","_controller","definitionIsMutation","_d","rewriteURIForGET","newURI","observer","setContext","next","complete","catch","data","abort","queryParams","addQueryParam","encodeURIComponent","serializedVariables","serializedExtensions","preFragment","fragmentStart","substr","queryParamsPrefix","join","_super","HttpLink","opts","request","NetworkStatus","isNetworkRequestInFlight","networkStatus","Observable","isNonEmptyArray","isApolloError","FetchType","generateErrorMessage","graphQLErrors","graphQLError","errorMessage","networkError","replace","ApolloError","extraInfo","_this","hasError","storeValue","policy","ObservableQuery","queryManager","shouldSubscribe","onSubscribe","observers","Set","subscriptions","isTornDown","queryId","generateQueryId","opDef","queryName","resolve","delete","size","removeQuery","setTimeout","subscription","unsubscribe","subscribe","currentResult","getCurrentResult","lastResult","lastError","loading","getCurrentQueryResult","partial","queryStoreValue","queryStore","fetchPolicy","isNetworkFetchPolicy","errorPolicy","ready","updateLastResult","stale","isDifferentFromLastResult","newResult","snapshot","lastResultSnapshot","getLastResult","getLastError","resetLastResults","resetQueryStoreErrors","refetch","fetchQuery","fetchMore","fetchMoreOptions","updateQuery","combinedOptions","qid","normal","fetchMoreResult","previousResult","stopQuery","subscribeToMore","startGraphQLSubscription","subscriptionData","previous","onError","add","setOptions","oldFetchPolicy","pollInterval","startPolling","stopPolling","setVariables","fetchResults","tryFetch","mapFn","getQueryWithPreviousResult","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","assertNotCacheFirstOrOnly","startPollingQuery","assumeImmutableResults","subObserver","_subscription","_observer","defaultSubscriptionObserverErrorCallback","first","setUpQuery","tearDownQuery","addObservableQuery","iterateObserversSafely","observeQuery","previousResult_1","query_1","fetchPolicy_1","transform","getLocalState","addExportedVariables","previousVariables","serverQuery","sub","clear","removeObservableQuery","observersWithMethod","obs","obsQuery","MutationStore","store","getStore","mutationId","initMutation","mutation","markMutationError","markMutationResult","reset","QueryStore","initQuery","previousQuery","isSetVariables","storePreviousVariables","isPoll","poll","isRefetch","metadata","fetchMoreForQueryId","markQueryResult","markQueryError","markQueryResultClient","observableQueryIds","capitalizeFirstLetter","str","charAt","toUpperCase","LocalState","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","resolverGroup","setResolvers","getResolvers","runResolvers","remoteResult","onlyRunForcedResolvers","resolveDocument","localResult","getFragmentMatcher","clientQuery","prepareContext","newContext","getCacheKey","dataIdFromObject","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","diff","returnPartialData","optimistic","rootValue","mainDefinition","fragmentMap","defaultOperationType","execContext","resolveSelectionSet","resultsToMerge","execute","typeCondition","resolveField","fieldResult","fragmentResult","all","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","__typename","resolveSubSelectedArray","item","multiplex","inner","asyncMap","observable","activeNextCount","completed","handler","QueryManager","link","queryDeduplication","onBroadcast","ssrMode","_e","localState","mutationStore","idCounter","queries","fetchQueryRejectFns","transformCache","inFlightLinkObservables","pollingInfoByQueryId","getCache","stop","_info","stopQueryNoBroadcast","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","generateUpdateQueriesInfo","self","_f","setQuery","getVariables","sent","ret","observableQuery","updater","markMutationInit","storeResult","getObservableFromLink","markMutationComplete","refetchQueryPromises","refetchQuery","queryOptions","fetchType","isNetworkOnly","needToFetch","shouldFetch","requestId","cancel","networkResult","updateQueryWatch","lastRequestId","invalidated","invalidate","fetchRequest","getQuery","hasForcedResolvers","newData","queryListenerForObserver","invoke","networkStatusChanged","shouldNotifyIfLoading","notifyOnNetworkStatusChange","hasGraphQLErrors","isMissing","errorStatusChanged","diffResult","resultFromStore","transformed","transformDocument","forLink","transformForLink","cacheEntry_1","defaultVars","watchQuery","transformedOptions","watchedQuery","String","stopQueryInStore","stopQueryInStoreNoBroadcast","addQueryListener","listener","listeners","watch","callback","clearStore","resetIds","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","startQuery","makeObservable","markSubscriptionResult","observablePromise_1","queryIdOrObservable","foundObserveableQuery","info","deduplication","inFlightLinkObservables_1","forceFetch","byVariables_1","varJson_1","cleanup","cleanupSub_1","of","errorsFromStore","fqrfId","result_1","prev","newInfo","checkInFlight","interval","maybeFetch_1","poll_1","clearTimeout","timeout","DataStore","initialCache","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","c","orig","cacheWrites_1","updateQueries_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","removeOptimistic","ApolloClient","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","typeDefs","clientAwarenessName","clientAwarenessVersion","empty","disableNetworkFetches","bind","defaultConnectToDevTools","__APOLLO_CLIENT__","devToolsHookCb","action","state","mutations","dataWithOptimisticResults","extract","readQuery","readFragment","writeQuery","writeFragment","writeData","__actionHookForDevTools","cb","__requestRaw","payload","initQueryManager","fn","onResetStore","onClearStore","restore","serializedState","setLocalStateFragmentMatcher","validateOperation","OPERATION_FIELDS","LinkError","isTerminating","fromError","errorValue","transformOperation","transformedOperation","createOperation","starting","defineProperty","enumerable","getKey","passthrough","forward","toLink","ApolloLink","from","links","reduce","y","concat","split","left","right","leftLink","rightLink","second","firstLink","nextLink"],"mappings":"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","file":"js/chunk-vendors~45876d5b.6e612af6.js","sourcesContent":["import { visit } from 'graphql/language/visitor';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { __assign, __spreadArrays } from 'tslib';\nimport stringify from 'fast-json-stable-stringify';\nexport { equal as isEqual } from '@wry/equality';\n\nfunction isScalarValue(value) {\n    return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nfunction isNumberValue(value) {\n    return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(17) : new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" +\n            'is not supported. Use variables instead of inline arguments to ' +\n            'overcome this limitation.');\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nfunction getStoreKeyName(fieldName, args, directives) {\n    if (directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var queryArgs_1 = args;\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = queryArgs_1[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction isField(selection) {\n    return selection.kind === 'Field';\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nfunction isIdValue(idObject) {\n    return idObject &&\n        idObject.type === 'id' &&\n        typeof idObject.generated === 'boolean';\n}\nfunction toIdValue(idConfig, generated) {\n    if (generated === void 0) { generated = false; }\n    return __assign({ type: 'id', generated: generated }, (typeof idConfig === 'string'\n        ? { id: idConfig, typename: undefined }\n        : idConfig));\n}\nfunction isJsonValue(jsonObject) {\n    return (jsonObject != null &&\n        typeof jsonObject === 'object' &&\n        jsonObject.type === 'json');\n}\nfunction defaultValueFromVariable(node) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(18) : new InvariantError(\"Variable nodes are not supported by valueFromNode\");\n}\nfunction valueFromNode(node, onVariable) {\n    if (onVariable === void 0) { onVariable = defaultValueFromVariable; }\n    switch (node.kind) {\n        case 'Variable':\n            return onVariable(node);\n        case 'NullValue':\n            return null;\n        case 'IntValue':\n            return parseInt(node.value, 10);\n        case 'FloatValue':\n            return parseFloat(node.value);\n        case 'ListValue':\n            return node.values.map(function (v) { return valueFromNode(v, onVariable); });\n        case 'ObjectValue': {\n            var value = {};\n            for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n                var field = _a[_i];\n                value[field.name.value] = valueFromNode(field.value, onVariable);\n            }\n            return value;\n        }\n        default:\n            return node.value;\n    }\n}\n\nfunction getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nfunction shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    return getInclusionDirectives(selection.directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === 'Variable') {\n            evaledValue = variables[ifArgument.value.name.value];\n            process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 13) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n    });\n}\nfunction getDirectiveNames(doc) {\n    var names = [];\n    visit(doc, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nfunction hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\nfunction hasClientExports(document) {\n    return (document &&\n        hasDirectives(['client'], document) &&\n        hasDirectives(['export'], document));\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === 'skip' || value === 'include';\n}\nfunction getInclusionDirectives(directives) {\n    return directives ? directives.filter(isInclusionDirective).map(function (directive) {\n        var directiveArguments = directive.arguments;\n        var directiveName = directive.name.value;\n        process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 14) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        var ifArgument = directiveArguments[0];\n        process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 15) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n        var ifValue = ifArgument.value;\n        process.env.NODE_ENV === \"production\" ? invariant(ifValue &&\n            (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 16) : invariant(ifValue &&\n            (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n        return { directive: directive, ifArgument: ifArgument };\n    }) : [];\n}\n\nfunction getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(11) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 12) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign(__assign({}, document), { definitions: __spreadArrays([\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions) });\n    return query;\n}\n\nfunction assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        if (typeof source === 'undefined' || source === null) {\n            return;\n        }\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    });\n    return target;\n}\n\nfunction getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    process.env.NODE_ENV === \"production\" ? invariant(mutationDef, 1) : invariant(mutationDef, 'Must contain a mutation definition.');\n    return mutationDef;\n}\nfunction checkDocument(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document', 2) : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1, 4) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nfunction getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    process.env.NODE_ENV === \"production\" ? invariant(def, 5) : invariant(def, \"GraphQL document is missing an operation\");\n    return def;\n}\nfunction getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query', 6) : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document', 7) : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1, 8) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n    var fragmentDef = doc.definitions[0];\n    process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition', 9) : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n    return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(10) : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return assign.apply(void 0, __spreadArrays([{}], defaultValues));\n    }\n    return {};\n}\nfunction variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n\nfunction filterInPlace(array, test, context) {\n    var target = 0;\n    array.forEach(function (elem, i) {\n        if (test.call(this, elem, i, array)) {\n            array[target++] = elem;\n        }\n    }, context);\n    array.length = target;\n    return array;\n}\n\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nfunction addTypenameToDocument(doc) {\n    return visit(checkDocument(doc), {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === 'export'; })) {\n                    return;\n                }\n                return __assign(__assign({}, node), { selections: __spreadArrays(selections, [TYPENAME_FIELD]) });\n            },\n        },\n    });\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                process.env.NODE_ENV === \"production\" || invariant.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!isField(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getDirectivesFromDocument(directives, doc) {\n    checkDocument(doc);\n    var parentPath;\n    return nullIfDocIsEmpty(visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, _parent, path) {\n                var currentPath = path.join('-');\n                if (!parentPath ||\n                    currentPath === parentPath ||\n                    !currentPath.startsWith(parentPath)) {\n                    if (node.selections) {\n                        var selectionsWithDirectives = node.selections.filter(function (selection) { return hasDirectivesInSelection(directives, selection); });\n                        if (hasDirectivesInSelectionSet(directives, node, false)) {\n                            parentPath = currentPath;\n                        }\n                        return __assign(__assign({}, node), { selections: selectionsWithDirectives });\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n        },\n    }));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    node.arguments.forEach(function (arg) {\n                        if (argMatcher(arg)) {\n                            argMatchCount_1 += 1;\n                        }\n                    });\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((isField(selection) || isInlineFragment(selection)) &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nfunction buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nfunction removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return isField(selection) && selection.name.value === '__typename';\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n\nvar canUseWeakMap = typeof WeakMap === 'function' && !(typeof navigator === 'object' &&\n    navigator.product === 'ReactNative');\n\nvar toString = Object.prototype.toString;\nfunction cloneDeep(value) {\n    return cloneDeepHelper(value, new Map());\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n\nfunction getEnv() {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n        return process.env.NODE_ENV;\n    }\n    return 'development';\n}\nfunction isEnv(env) {\n    return getEnv() === env;\n}\nfunction isProduction() {\n    return isEnv('production') === true;\n}\nfunction isDevelopment() {\n    return isEnv('development') === true;\n}\nfunction isTest() {\n    return isEnv('test') === true;\n}\n\nfunction tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nfunction graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\n\nfunction deepFreeze(o) {\n    Object.freeze(o);\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\n        if (o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    });\n    return o;\n}\nfunction maybeDeepFreeze(obj) {\n    if (isDevelopment() || isTest()) {\n        var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n        if (!symbolIsPolyfilled) {\n            return deepFreeze(obj);\n        }\n    }\n    return obj;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var pastCopies = [];\n        target = shallowCopyForMerge(target, pastCopies);\n        for (var i = 1; i < count; ++i) {\n            target = mergeHelper(target, sources[i], pastCopies);\n        }\n    }\n    return target;\n}\nfunction isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\nfunction mergeHelper(target, source, pastCopies) {\n    if (isObject(source) && isObject(target)) {\n        if (Object.isExtensible && !Object.isExtensible(target)) {\n            target = shallowCopyForMerge(target, pastCopies);\n        }\n        Object.keys(source).forEach(function (sourceKey) {\n            var sourceValue = source[sourceKey];\n            if (hasOwnProperty.call(target, sourceKey)) {\n                var targetValue = target[sourceKey];\n                if (sourceValue !== targetValue) {\n                    target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n                }\n            }\n            else {\n                target[sourceKey] = sourceValue;\n            }\n        });\n        return target;\n    }\n    return source;\n}\nfunction shallowCopyForMerge(value, pastCopies) {\n    if (value !== null &&\n        typeof value === 'object' &&\n        pastCopies.indexOf(value) < 0) {\n        if (Array.isArray(value)) {\n            value = value.slice(0);\n        }\n        else {\n            value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n        }\n        pastCopies.push(value);\n    }\n    return value;\n}\n\nvar haveWarned = Object.create({});\nfunction warnOnceInDevelopment(msg, type) {\n    if (type === void 0) { type = 'warn'; }\n    if (!isProduction() && !haveWarned[msg]) {\n        if (!isTest()) {\n            haveWarned[msg] = true;\n        }\n        if (type === 'error') {\n            console.error(msg);\n        }\n        else {\n            console.warn(msg);\n        }\n    }\n}\n\nfunction stripSymbols(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nexport { addTypenameToDocument, argumentsObjectFromField, assign, buildQueryFromSelectionSet, canUseWeakMap, checkDocument, cloneDeep, createFragmentMap, getDefaultValues, getDirectiveInfoFromField, getDirectiveNames, getDirectivesFromDocument, getEnv, getFragmentDefinition, getFragmentDefinitions, getFragmentQueryDocument, getInclusionDirectives, getMainDefinition, getMutationDefinition, getOperationDefinition, getOperationDefinitionOrDie, getOperationName, getQueryDefinition, getStoreKeyName, graphQLResultHasError, hasClientExports, hasDirectives, isDevelopment, isEnv, isField, isIdValue, isInlineFragment, isJsonValue, isNumberValue, isProduction, isScalarValue, isTest, maybeDeepFreeze, mergeDeep, mergeDeepArray, removeArgumentsFromDocument, removeClientSetsFromDocument, removeConnectionDirectiveFromDocument, removeDirectivesFromDocument, removeFragmentSpreadFromDocument, resultKeyNameFromField, shouldInclude, storeKeyNameFromField, stripSymbols, toIdValue, tryFunctionOrLogError, valueFromNode, valueToObjectRepresentation, variablesInOperation, warnOnceInDevelopment };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n};\nvar defaultHeaders = {\n    accept: '*/*',\n    'content-type': 'application/json',\n};\nvar defaultOptions = {\n    method: 'POST',\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nvar throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = 'ServerError';\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\nvar parseAndCheckHttpResponse = function (operations) { return function (response) {\n    return (response\n        .text()\n        .then(function (bodyText) {\n        try {\n            return JSON.parse(bodyText);\n        }\n        catch (err) {\n            var parseError = err;\n            parseError.name = 'ServerParseError';\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            return Promise.reject(parseError);\n        }\n    })\n        .then(function (result) {\n        if (response.status >= 300) {\n            throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n        }\n        if (!Array.isArray(result) &&\n            !result.hasOwnProperty('data') &&\n            !result.hasOwnProperty('errors')) {\n            throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations)\n                ? operations.map(function (op) { return op.operationName; })\n                : operations.operationName) + \"'.\");\n        }\n        return result;\n    }));\n}; };\nvar checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        var library = 'unfetch';\n        if (typeof window === 'undefined')\n            library = 'node-fetch';\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n    }\n};\nvar createSignalIfSupported = function () {\n    if (typeof AbortController === 'undefined')\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\nvar selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = __assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });\n    var http = fallbackConfig.http;\n    configs.forEach(function (config) {\n        options = __assign({}, options, config.options, { headers: __assign({}, options.headers, config.headers) });\n        if (config.credentials)\n            options.credentials = config.credentials;\n        http = __assign({}, http, config.http);\n    });\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    if (http.includeQuery)\n        body.query = print(query);\n    return {\n        options: options,\n        body: body,\n    };\n};\nvar serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\nvar selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === 'function') {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || '/graphql';\n    }\n};\n\nexport { checkFetcher, createSignalIfSupported, fallbackHttpConfig, parseAndCheckHttpResponse, selectHttpOptionsAndBody, selectURI, serializeFetchParameter, throwServerError };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __rest, __assign, __extends } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, createSignalIfSupported, serializeFetchParameter, parseAndCheckHttpResponse } from 'apollo-link-http-common';\n\nvar createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    checkFetcher(fetcher);\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\nfunction rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\nvar HttpLink = (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(ApolloLink));\n\nexport { HttpLink, createHttpLink };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { getOperationDefinition, isEqual, tryFunctionOrLogError, cloneDeep, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, canUseWeakMap, graphQLResultHasError, removeConnectionDirectiveFromDocument, hasClientExports, getDefaultValues, getOperationName } from 'apollo-utilities';\nimport { Observable as Observable$1, execute, ApolloLink } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nvar NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n}\n\nvar Observable = (function (_super) {\n    __extends(Observable, _super);\n    function Observable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Observable.prototype[$$observable] = function () {\n        return this;\n    };\n    Observable.prototype['@@observable'] = function () {\n        return this;\n    };\n    return Observable;\n}(Observable$1));\n\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\n\nfunction isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (isNonEmptyArray(err.graphQLErrors)) {\n        err.graphQLErrors.forEach(function (graphQLError) {\n            var errorMessage = graphQLError\n                ? graphQLError.message\n                : 'Error message not found.';\n            message += \"GraphQL error: \" + errorMessage + \"\\n\";\n        });\n    }\n    if (err.networkError) {\n        message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.networkError = networkError || null;\n        if (!errorMessage) {\n            _this.message = generateErrorMessage(_this);\n        }\n        else {\n            _this.message = errorMessage;\n        }\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\n\nvar FetchType;\n(function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n\nvar hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue && (storeValue.networkError ||\n        (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors)));\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        var opDef = getOperationDefinition(options.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        _this.queryManager = queryManager;\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        var result = this.getCurrentResult();\n        if (result.data === undefined) {\n            result.data = {};\n        }\n        return result;\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        if (this.isTornDown) {\n            var lastResult = this.lastResult;\n            return {\n                data: !this.lastError && lastResult && lastResult.data || void 0,\n                error: this.lastError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n            };\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        var result;\n        var fetchPolicy = this.options.fetchPolicy;\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' ||\n            fetchPolicy === 'no-cache';\n        if (queryStoreValue) {\n            var networkStatus = queryStoreValue.networkStatus;\n            if (hasError(queryStoreValue, this.options.errorPolicy)) {\n                return {\n                    data: void 0,\n                    loading: false,\n                    networkStatus: networkStatus,\n                    error: new ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    }),\n                };\n            }\n            if (queryStoreValue.variables) {\n                this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n                this.variables = this.options.variables;\n            }\n            result = {\n                data: data,\n                loading: isNetworkRequestInFlight(networkStatus),\n                networkStatus: networkStatus,\n            };\n            if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n                result.errors = queryStoreValue.graphQLErrors;\n            }\n        }\n        else {\n            var loading = isNetworkFetchPolicy ||\n                (partial && fetchPolicy !== 'cache-only');\n            result = {\n                data: data,\n                loading: loading,\n                networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready,\n            };\n        }\n        if (!partial) {\n            this.updateLastResult(__assign(__assign({}, result), { stale: false }));\n        }\n        return __assign(__assign({}, result), { partial: partial });\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot &&\n            newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            isEqual(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        var queryStore = this.queryManager.queryStore.get(this.queryId);\n        if (queryStore) {\n            queryStore.networkError = null;\n            queryStore.graphQLErrors = [];\n        }\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'cache-and-network') {\n            fetchPolicy = 'network-only';\n        }\n        if (!isEqual(this.variables, variables)) {\n            this.variables = __assign(__assign({}, this.variables), variables);\n        }\n        if (!isEqual(this.options.variables, this.variables)) {\n            this.options.variables = __assign(__assign({}, this.options.variables), this.variables);\n        }\n        return this.queryManager.fetchQuery(this.queryId, __assign(__assign({}, this.options), { fetchPolicy: fetchPolicy }), FetchType.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery, 2) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), { variables: __assign(__assign({}, this.variables), fetchMoreOptions.variables) }))), { fetchPolicy: 'network-only' });\n        var qid = this.queryManager.generateQueryId();\n        return this.queryManager\n            .fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId)\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables,\n                });\n            });\n            _this.queryManager.stopQuery(qid);\n            return fetchMoreResult;\n        }, function (error) {\n            _this.queryManager.stopQuery(qid);\n            throw error;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldFetchPolicy = this.options.fetchPolicy;\n        this.options = __assign(__assign({}, this.options), opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var fetchPolicy = opts.fetchPolicy;\n        return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' ||\n            oldFetchPolicy === 'standby' ||\n            fetchPolicy === 'network-only'), opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        variables = variables || this.variables;\n        if (!tryFetch && isEqual(variables, this.variables)) {\n            return this.observers.size && fetchResults\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.variables = this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.queryManager.fetchQuery(this.queryId, this.options);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var _a = queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.options.pollInterval = undefined;\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        assertNotCacheFirstOrOnly(this);\n        this.options.pollInterval = pollInterval;\n        this.queryManager.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult) {\n        var previousResult = this.lastResult;\n        this.lastResult = newResult;\n        this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n            ? newResult\n            : cloneDeep(newResult);\n        return previousResult;\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        try {\n            var subObserver = observer._subscription._observer;\n            if (subObserver && !subObserver.error) {\n                subObserver.error = defaultSubscriptionObserverErrorCallback;\n            }\n        }\n        catch (_a) { }\n        var first = !this.observers.size;\n        this.observers.add(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (first) {\n            this.setUpQuery();\n        }\n        return function () {\n            if (_this.observers.delete(observer) && !_this.observers.size) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        var _a = this, queryManager = _a.queryManager, queryId = _a.queryId;\n        if (this.shouldSubscribe) {\n            queryManager.addObservableQuery(queryId, this);\n        }\n        if (this.options.pollInterval) {\n            assertNotCacheFirstOrOnly(this);\n            queryManager.startPollingQuery(this.options, queryId);\n        }\n        var onError = function (error) {\n            _this.updateLastResult(__assign(__assign({}, _this.lastResult), { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));\n            iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n        };\n        queryManager.observeQuery(queryId, this.options, {\n            next: function (result) {\n                if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n                    var previousResult_1 = _this.updateLastResult(result);\n                    var _a = _this.options, query_1 = _a.query, variables = _a.variables, fetchPolicy_1 = _a.fetchPolicy;\n                    if (queryManager.transform(query_1).hasClientExports) {\n                        queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n                            var previousVariables = _this.variables;\n                            _this.variables = _this.options.variables = variables;\n                            if (!result.loading &&\n                                previousResult_1 &&\n                                fetchPolicy_1 !== 'cache-only' &&\n                                queryManager.transform(query_1).serverQuery &&\n                                !isEqual(previousVariables, variables)) {\n                                _this.refetch();\n                            }\n                            else {\n                                iterateObserversSafely(_this.observers, 'next', result);\n                            }\n                        });\n                    }\n                    else {\n                        iterateObserversSafely(_this.observers, 'next', result);\n                    }\n                }\n            },\n            error: onError,\n        }).catch(onError);\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        var queryManager = this.queryManager;\n        this.isTornDown = true;\n        queryManager.stopPollingQuery(this.queryId);\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        queryManager.removeObservableQuery(this.queryId);\n        queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n    };\n    return ObservableQuery;\n}(Observable));\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\nfunction iterateObserversSafely(observers, method, argument) {\n    var observersWithMethod = [];\n    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });\n    observersWithMethod.forEach(function (obs) { return obs[method](argument); });\n}\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n    var fetchPolicy = obsQuery.options.fetchPolicy;\n    process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 3) : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nvar MutationStore = (function () {\n    function MutationStore() {\n        this.store = {};\n    }\n    MutationStore.prototype.getStore = function () {\n        return this.store;\n    };\n    MutationStore.prototype.get = function (mutationId) {\n        return this.store[mutationId];\n    };\n    MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n        this.store[mutationId] = {\n            mutation: mutation,\n            variables: variables || {},\n            loading: true,\n            error: null,\n        };\n    };\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n        var mutation = this.store[mutationId];\n        if (mutation) {\n            mutation.loading = false;\n            mutation.error = error;\n        }\n    };\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n        var mutation = this.store[mutationId];\n        if (mutation) {\n            mutation.loading = false;\n            mutation.error = null;\n        }\n    };\n    MutationStore.prototype.reset = function () {\n        this.store = {};\n    };\n    return MutationStore;\n}());\n\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        process.env.NODE_ENV === \"production\" ? invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            isEqual(previousQuery.document, query.document), 19) : invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            isEqual(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!isEqual(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        var storeValue = this.store && this.store[queryId];\n        if (storeValue) {\n            storeValue.networkError = null;\n            storeValue.previousVariables = null;\n            if (complete) {\n                storeValue.networkStatus = NetworkStatus.ready;\n            }\n        }\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        Object.keys(this.store).forEach(function (queryId) {\n            if (observableQueryIds.indexOf(queryId) < 0) {\n                _this.stopQuery(queryId);\n            }\n            else {\n                _this.store[queryId].networkStatus = NetworkStatus.loading;\n            }\n        });\n    };\n    return QueryStore;\n}());\n\nfunction capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n            process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in a query but no ApolloClient resolvers ' +\n                'were specified. This means ApolloClient local resolver handling ' +\n                'has been disabled, and @client directives will be passed through ' +\n                'to your link chain.');\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return this.resolvers ? removeClientSetsFromDocument(document) : document;\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var cache = this.cache;\n        var newContext = __assign(__assign({}, context), { cache: cache, getCacheKey: function (obj) {\n                if (cache.config) {\n                    return cache.config.dataIdFromObject(obj);\n                }\n                else {\n                    process.env.NODE_ENV === \"production\" ? invariant(false, 6) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' +\n                        'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                }\n            } });\n        return newContext;\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? capitalizeFirstLetter(definitionOperation)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign(__assign({}, context), { cache: cache,\n                        client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            process.env.NODE_ENV === \"production\" ? invariant(fragment, 7) : invariant(fragment, \"No fragment named \" + selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field: field, fragmentMap: execContext.fragmentMap }));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\n\nfunction multiplex(inner) {\n    var observers = new Set();\n    var sub = null;\n    return new Observable(function (observer) {\n        observers.add(observer);\n        sub = sub || inner.subscribe({\n            next: function (value) {\n                observers.forEach(function (obs) { return obs.next && obs.next(value); });\n            },\n            error: function (error) {\n                observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n            complete: function () {\n                observers.forEach(function (obs) { return obs.complete && obs.complete(); });\n            },\n        });\n        return function () {\n            if (observers.delete(observer) && !observers.size && sub) {\n                sub.unsubscribe();\n                sub = null;\n            }\n        };\n    });\n}\nfunction asyncMap(observable, mapFn) {\n    return new Observable(function (observer) {\n        var next = observer.next, error = observer.error, complete = observer.complete;\n        var activeNextCount = 0;\n        var completed = false;\n        var handler = {\n            next: function (value) {\n                ++activeNextCount;\n                new Promise(function (resolve) {\n                    resolve(mapFn(value));\n                }).then(function (result) {\n                    --activeNextCount;\n                    next && next.call(observer, result);\n                    completed && handler.complete();\n                }, function (e) {\n                    --activeNextCount;\n                    error && error.call(observer, e);\n                });\n            },\n            error: function (e) {\n                error && error.call(observer, e);\n            },\n            complete: function () {\n                completed = true;\n                if (!activeNextCount) {\n                    complete && complete.call(observer);\n                }\n            },\n        };\n        var sub = observable.subscribe(handler);\n        return function () { return sub.unsubscribe(); };\n    });\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.mutationStore = new MutationStore();\n        this.queryStore = new QueryStore();\n        this.clientAwareness = {};\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryRejectFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.inFlightLinkObservables = new Map();\n        this.pollingInfoByQueryId = new Map();\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: store.getCache() });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(process.env.NODE_ENV === \"production\" ? new InvariantError(8) : new InvariantError('QueryManager stopped while query was in flight'));\n        });\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, generateUpdateQueriesInfo, self;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        process.env.NODE_ENV === \"production\" ? invariant(mutation, 9) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 10) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n                        mutationId = this.generateQueryId();\n                        mutation = this.transform(mutation).document;\n                        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                _this.queries.forEach(function (_a, queryId) {\n                                    var observableQuery = _a.observableQuery;\n                                    if (observableQuery) {\n                                        var queryName = observableQuery.queryName;\n                                        if (queryName &&\n                                            hasOwnProperty.call(updateQueriesByName, queryName)) {\n                                            ret[queryId] = {\n                                                updater: updateQueriesByName[queryName],\n                                                query: _this.queryStore.get(queryId),\n                                            };\n                                        }\n                                    }\n                                });\n                            }\n                            return ret;\n                        };\n                        this.mutationStore.initMutation(mutationId, mutation, variables);\n                        this.dataStore.markMutationInit({\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: variables,\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                            optimisticResponse: optimisticResponse,\n                        });\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false).subscribe({\n                                    next: function (result) {\n                                        if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                            error = new ApolloError({\n                                                graphQLErrors: result.errors,\n                                            });\n                                            return;\n                                        }\n                                        self.mutationStore.markMutationResult(mutationId);\n                                        if (fetchPolicy !== 'no-cache') {\n                                            self.dataStore.markMutationResult({\n                                                mutationId: mutationId,\n                                                result: result,\n                                                document: mutation,\n                                                variables: variables,\n                                                updateQueries: generateUpdateQueriesInfo(),\n                                                update: updateWithProxyFn,\n                                            });\n                                        }\n                                        storeResult = result;\n                                    },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        self.setQuery(mutationId, function () { return ({ document: null }); });\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (error) {\n                                            self.mutationStore.markMutationError(mutationId, error);\n                                        }\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        if (error) {\n                                            reject(error);\n                                            return;\n                                        }\n                                        if (typeof refetchQueries === 'function') {\n                                            refetchQueries = refetchQueries(storeResult);\n                                        }\n                                        var refetchQueryPromises = [];\n                                        if (isNonEmptyArray(refetchQueries)) {\n                                            refetchQueries.forEach(function (refetchQuery) {\n                                                if (typeof refetchQuery === 'string') {\n                                                    self.queries.forEach(function (_a) {\n                                                        var observableQuery = _a.observableQuery;\n                                                        if (observableQuery &&\n                                                            observableQuery.queryName === refetchQuery) {\n                                                            refetchQueryPromises.push(observableQuery.refetch());\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    var queryOptions = {\n                                                        query: refetchQuery.query,\n                                                        variables: refetchQuery.variables,\n                                                        fetchPolicy: 'network-only',\n                                                    };\n                                                    if (refetchQuery.context) {\n                                                        queryOptions.context = refetchQuery.context;\n                                                    }\n                                                    refetchQueryPromises.push(self.query(queryOptions));\n                                                }\n                                            });\n                                        }\n                                        Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                            self.setQuery(mutationId, function () { return ({ document: null }); });\n                                            if (errorPolicy === 'ignore' &&\n                                                storeResult &&\n                                                graphQLResultHasError(storeResult)) {\n                                                delete storeResult.errors;\n                                            }\n                                            resolve(storeResult);\n                                        });\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result, shouldFetch, requestId, cancel, networkResult;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _a = options.metadata, metadata = _a === void 0 ? null : _a, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? 'cache-first' : _b, _c = options.context, context = _c === void 0 ? {} : _c;\n                        query = this.transform(options.query).document;\n                        variables = this.getVariables(query, options.variables);\n                        if (!this.transform(query).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(query, variables, context)];\n                    case 1:\n                        variables = _e.sent();\n                        _e.label = 2;\n                    case 2:\n                        options = __assign(__assign({}, options), { variables: variables });\n                        isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n                        needToFetch = isNetworkOnly;\n                        if (!isNetworkOnly) {\n                            _d = this.dataStore.getCache().diff({\n                                query: query,\n                                variables: variables,\n                                returnPartialData: true,\n                                optimistic: false,\n                            }), complete = _d.complete, result = _d.result;\n                            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n                            storeResult = result;\n                        }\n                        shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n                        if (hasDirectives(['live'], query))\n                            shouldFetch = true;\n                        requestId = this.idCounter++;\n                        cancel = fetchPolicy !== 'no-cache'\n                            ? this.updateQueryWatch(queryId, query, options)\n                            : undefined;\n                        this.setQuery(queryId, function () { return ({\n                            document: query,\n                            lastRequestId: requestId,\n                            invalidated: true,\n                            cancel: cancel,\n                        }); });\n                        this.invalidate(fetchMoreForQueryId);\n                        this.queryStore.initQuery({\n                            queryId: queryId,\n                            document: query,\n                            storePreviousVariables: shouldFetch,\n                            variables: variables,\n                            isPoll: fetchType === FetchType.poll,\n                            isRefetch: fetchType === FetchType.refetch,\n                            metadata: metadata,\n                            fetchMoreForQueryId: fetchMoreForQueryId,\n                        });\n                        this.broadcastQueries();\n                        if (shouldFetch) {\n                            networkResult = this.fetchRequest({\n                                requestId: requestId,\n                                queryId: queryId,\n                                document: query,\n                                options: options,\n                                fetchMoreForQueryId: fetchMoreForQueryId,\n                            }).catch(function (error) {\n                                if (isApolloError(error)) {\n                                    throw error;\n                                }\n                                else {\n                                    if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                                        _this.invalidate(queryId);\n                                        _this.invalidate(fetchMoreForQueryId);\n                                        _this.broadcastQueries();\n                                    }\n                                    throw new ApolloError({ networkError: error });\n                                }\n                            });\n                            if (fetchPolicy !== 'cache-and-network') {\n                                return [2, networkResult];\n                            }\n                            networkResult.catch(function () { });\n                        }\n                        this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n                        this.invalidate(queryId);\n                        this.invalidate(fetchMoreForQueryId);\n                        if (this.transform(query).hasForcedResolvers) {\n                            return [2, this.localState.runResolvers({\n                                    document: query,\n                                    remoteResult: { data: storeResult },\n                                    context: context,\n                                    variables: variables,\n                                    onlyRunForcedResolvers: true,\n                                }).then(function (result) {\n                                    _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                                    _this.broadcastQueries();\n                                    return result;\n                                })];\n                        }\n                        this.broadcastQueries();\n                        return [2, { data: storeResult }];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markQueryResult = function (queryId, result, _a, fetchMoreForQueryId) {\n        var fetchPolicy = _a.fetchPolicy, variables = _a.variables, errorPolicy = _a.errorPolicy;\n        if (fetchPolicy === 'no-cache') {\n            this.setQuery(queryId, function () { return ({\n                newData: { result: result.data, complete: true },\n            }); });\n        }\n        else {\n            this.dataStore.markQueryResult(result, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n        }\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        function invoke(method, argument) {\n            if (observer[method]) {\n                try {\n                    observer[method](argument);\n                }\n                catch (e) {\n                    process.env.NODE_ENV === \"production\" || invariant.error(e);\n                }\n            }\n            else if (method === 'error') {\n                process.env.NODE_ENV === \"production\" || invariant.error(argument);\n            }\n        }\n        return function (queryStoreValue, newData) {\n            _this.invalidate(queryId, false);\n            if (!queryStoreValue)\n                return;\n            var _a = _this.getQuery(queryId), observableQuery = _a.observableQuery, document = _a.document;\n            var fetchPolicy = observableQuery\n                ? observableQuery.options.fetchPolicy\n                : options.fetchPolicy;\n            if (fetchPolicy === 'standby')\n                return;\n            var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n            var lastResult = observableQuery && observableQuery.getLastResult();\n            var networkStatusChanged = !!(lastResult &&\n                lastResult.networkStatus !== queryStoreValue.networkStatus);\n            var shouldNotifyIfLoading = options.returnPartialData ||\n                (!newData && queryStoreValue.previousVariables) ||\n                (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                fetchPolicy === 'cache-only' ||\n                fetchPolicy === 'cache-and-network';\n            if (loading && !shouldNotifyIfLoading) {\n                return;\n            }\n            var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n            var errorPolicy = observableQuery\n                && observableQuery.options.errorPolicy\n                || options.errorPolicy\n                || 'none';\n            if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n                return invoke('error', new ApolloError({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }));\n            }\n            try {\n                var data = void 0;\n                var isMissing = void 0;\n                if (newData) {\n                    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n                        _this.setQuery(queryId, function () { return ({ newData: null }); });\n                    }\n                    data = newData.result;\n                    isMissing = !newData.complete;\n                }\n                else {\n                    var lastError = observableQuery && observableQuery.getLastError();\n                    var errorStatusChanged = errorPolicy !== 'none' &&\n                        (lastError && lastError.graphQLErrors) !==\n                            queryStoreValue.graphQLErrors;\n                    if (lastResult && lastResult.data && !errorStatusChanged) {\n                        data = lastResult.data;\n                        isMissing = false;\n                    }\n                    else {\n                        var diffResult = _this.dataStore.getCache().diff({\n                            query: document,\n                            variables: queryStoreValue.previousVariables ||\n                                queryStoreValue.variables,\n                            returnPartialData: true,\n                            optimistic: true,\n                        });\n                        data = diffResult.result;\n                        isMissing = !diffResult.complete;\n                    }\n                }\n                var stale = isMissing && !(options.returnPartialData ||\n                    fetchPolicy === 'cache-only');\n                var resultFromStore = {\n                    data: stale ? lastResult && lastResult.data : data,\n                    loading: loading,\n                    networkStatus: queryStoreValue.networkStatus,\n                    stale: stale,\n                };\n                if (errorPolicy === 'all' && hasGraphQLErrors) {\n                    resultFromStore.errors = queryStoreValue.graphQLErrors;\n                }\n                invoke('next', resultFromStore);\n            }\n            catch (networkError) {\n                invoke('error', new ApolloError({ networkError: networkError }));\n            }\n        };\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cache = this.dataStore.getCache();\n            var transformed = cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby', 11) : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        options.variables = this.getVariables(options.query, options.variables);\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = __assign({}, options);\n        return new ObservableQuery({\n            queryManager: this,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(options.query, 12) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 13) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 14) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 15) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        return new Promise(function (resolve, reject) {\n            var watchedQuery = _this.watchQuery(options, false);\n            _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n            watchedQuery\n                .result()\n                .then(resolve, reject)\n                .then(function () {\n                return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n            });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.idCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        this.stopPollingQuery(queryId);\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(queryId);\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var listeners = _a.listeners;\n            listeners.add(listener);\n            return { invalidated: false };\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var cancel = this.getQuery(queryId).cancel;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (cancel)\n            cancel();\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(process.env.NODE_ENV === \"production\" ? new InvariantError(16) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        return this.dataStore.reset();\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery) {\n                var fetchPolicy = observableQuery.options.fetchPolicy;\n                observableQuery.resetLastResults();\n                if (fetchPolicy !== 'cache-only' &&\n                    (includeStandby || fetchPolicy !== 'standby')) {\n                    observableQueryPromises.push(observableQuery.refetch());\n                }\n                _this.setQuery(queryId, function () { return ({ newData: null }); });\n                _this.invalidate(queryId);\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.observeQuery = function (queryId, options, observer) {\n        this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));\n        return this.fetchQuery(queryId, options);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, variables = _a.variables;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n                if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n                    _this.dataStore.markSubscriptionResult(result, query, variables);\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n        this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n        this.getQuery(queryId).subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query, fetchPolicy = _a.fetchPolicy, returnPartialData = _a.returnPartialData;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData && newData.complete) {\n            return { data: newData.result, partial: false };\n        }\n        if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n            return { data: undefined, partial: false };\n        }\n        var _b = this.dataStore.getCache().diff({\n            query: query,\n            variables: variables,\n            previousResult: lastResult ? lastResult.data : undefined,\n            returnPartialData: true,\n            optimistic: optimistic,\n        }), result = _b.result, complete = _b.complete;\n        return {\n            data: (complete || returnPartialData) ? result : void 0,\n            partial: !complete,\n        };\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery, 17) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        return {\n            previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        var _this = this;\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (info.invalidated) {\n                info.listeners.forEach(function (listener) {\n                    if (listener) {\n                        listener(_this.queryStore.get(id), info.newData);\n                    }\n                });\n            }\n        });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        if (deduplication === void 0) { deduplication = this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _a = this, inFlightLinkObservables_1 = _a.inFlightLinkObservables, link = _a.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = JSON.stringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));\n                    var cleanup = function () {\n                        byVariables_1.delete(varJson_1);\n                        if (!byVariables_1.size)\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        cleanupSub_1.unsubscribe();\n                    };\n                    var cleanupSub_1 = observable.subscribe({\n                        next: cleanup,\n                        error: cleanup,\n                        complete: cleanup,\n                    });\n                }\n            }\n            else {\n                observable = multiplex(execute(link, operation));\n            }\n        }\n        else {\n            observable = Observable.of({ data: {} });\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var resultFromStore;\n        var errorsFromStore;\n        return new Promise(function (resolve, reject) {\n            var observable = _this.getObservableFromLink(document, options.context, variables);\n            var fqrfId = \"fetchRequest:\" + queryId;\n            _this.fetchQueryRejectFns.set(fqrfId, reject);\n            var cleanup = function () {\n                _this.fetchQueryRejectFns.delete(fqrfId);\n                _this.setQuery(queryId, function (_a) {\n                    var subscriptions = _a.subscriptions;\n                    subscriptions.delete(subscription);\n                });\n            };\n            var subscription = observable.map(function (result) {\n                if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                    _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                    _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n                    _this.invalidate(queryId);\n                    _this.invalidate(fetchMoreForQueryId);\n                    _this.broadcastQueries();\n                }\n                if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n                    return reject(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                if (errorPolicy === 'all') {\n                    errorsFromStore = result.errors;\n                }\n                if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                    resultFromStore = result.data;\n                }\n                else {\n                    var _a = _this.dataStore.getCache().diff({\n                        variables: variables,\n                        query: document,\n                        optimistic: false,\n                        returnPartialData: true,\n                    }), result_1 = _a.result, complete = _a.complete;\n                    if (complete || options.returnPartialData) {\n                        resultFromStore = result_1;\n                    }\n                }\n            }).subscribe({\n                error: function (error) {\n                    cleanup();\n                    reject(error);\n                },\n                complete: function () {\n                    cleanup();\n                    resolve({\n                        data: resultFromStore,\n                        errors: errorsFromStore,\n                        loading: false,\n                        networkStatus: NetworkStatus.ready,\n                        stale: false,\n                    });\n                },\n            });\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                subscriptions.add(subscription);\n            });\n        });\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return (this.queries.get(queryId) || {\n            listeners: new Set(),\n            invalidated: false,\n            document: null,\n            newData: null,\n            lastRequestId: 1,\n            observableQuery: null,\n            subscriptions: new Set(),\n        });\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = __assign(__assign({}, prev), updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (queryId, invalidated) {\n        if (invalidated === void 0) { invalidated = true; }\n        if (queryId) {\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n        var _this = this;\n        var pollInterval = options.pollInterval;\n        process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 18) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (!this.ssrMode) {\n            var info = this.pollingInfoByQueryId.get(queryId);\n            if (!info) {\n                this.pollingInfoByQueryId.set(queryId, (info = {}));\n            }\n            info.interval = pollInterval;\n            info.options = __assign(__assign({}, options), { fetchPolicy: 'network-only' });\n            var maybeFetch_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    if (_this.checkInFlight(queryId)) {\n                        poll_1();\n                    }\n                    else {\n                        _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n                    }\n                }\n            };\n            var poll_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    clearTimeout(info.timeout);\n                    info.timeout = setTimeout(maybeFetch_1, info.interval);\n                }\n            };\n            if (listener) {\n                this.addQueryListener(queryId, listener);\n            }\n            poll_1();\n        }\n        return queryId;\n    };\n    QueryManager.prototype.stopPollingQuery = function (queryId) {\n        this.pollingInfoByQueryId.delete(queryId);\n    };\n    return QueryManager;\n}());\n\nvar DataStore = (function () {\n    function DataStore(initialCache) {\n        this.cache = initialCache;\n    }\n    DataStore.prototype.getCache = function () {\n        return this.cache;\n    };\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n        if (ignoreErrors === void 0) { ignoreErrors = false; }\n        var writeWithErrors = !graphQLResultHasError(result);\n        if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n            writeWithErrors = true;\n        }\n        if (!fetchMoreForQueryId && writeWithErrors) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n        if (!graphQLResultHasError(result)) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_SUBSCRIPTION',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markMutationInit = function (mutation) {\n        var _this = this;\n        if (mutation.optimisticResponse) {\n            var optimistic_1;\n            if (typeof mutation.optimisticResponse === 'function') {\n                optimistic_1 = mutation.optimisticResponse(mutation.variables);\n            }\n            else {\n                optimistic_1 = mutation.optimisticResponse;\n            }\n            this.cache.recordOptimisticTransaction(function (c) {\n                var orig = _this.cache;\n                _this.cache = c;\n                try {\n                    _this.markMutationResult({\n                        mutationId: mutation.mutationId,\n                        result: { data: optimistic_1 },\n                        document: mutation.document,\n                        variables: mutation.variables,\n                        updateQueries: mutation.updateQueries,\n                        update: mutation.update,\n                    });\n                }\n                finally {\n                    _this.cache = orig;\n                }\n            }, mutation.mutationId);\n        }\n    };\n    DataStore.prototype.markMutationResult = function (mutation) {\n        var _this = this;\n        if (!graphQLResultHasError(mutation.result)) {\n            var cacheWrites_1 = [{\n                    result: mutation.result.data,\n                    dataId: 'ROOT_MUTATION',\n                    query: mutation.document,\n                    variables: mutation.variables,\n                }];\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                Object.keys(updateQueries_1).forEach(function (id) {\n                    var _a = updateQueries_1[id], query = _a.query, updater = _a.updater;\n                    var _b = _this.cache.diff({\n                        query: query.document,\n                        variables: query.variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _b.result, complete = _b.complete;\n                    if (complete) {\n                        var nextQueryResult = tryFunctionOrLogError(function () {\n                            return updater(currentQueryResult, {\n                                mutationResult: mutation.result,\n                                queryName: getOperationName(query.document) || undefined,\n                                queryVariables: query.variables,\n                            });\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites_1.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: query.document,\n                                variables: query.variables,\n                            });\n                        }\n                    }\n                });\n            }\n            this.cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n                var update = mutation.update;\n                if (update) {\n                    tryFunctionOrLogError(function () { return update(c, mutation.result); });\n                }\n            });\n        }\n    };\n    DataStore.prototype.markMutationComplete = function (_a) {\n        var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;\n        if (optimisticResponse) {\n            this.cache.removeOptimistic(mutationId);\n        }\n    };\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n        this.cache.write({\n            result: newResult,\n            dataId: 'ROOT_QUERY',\n            variables: variables,\n            query: document,\n        });\n    };\n    DataStore.prototype.reset = function () {\n        return this.cache.reset();\n    };\n    return DataStore;\n}());\n\nvar version = \"2.6.10\";\n\nvar hasSuggestedDevtools = false;\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        var cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? false : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link && resolvers) {\n            link = ApolloLink.empty();\n        }\n        if (!link || !cache) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(4) : new InvariantError(\"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" +\n                \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" +\n                \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\");\n        }\n        this.link = link;\n        this.cache = cache;\n        this.store = new DataStore(cache);\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || {};\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (window.navigator &&\n                        window.navigator.userAgent &&\n                        window.navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            link: this.link,\n            store: this.store,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: function () {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.queryStore.getStore(),\n                            mutations: _this.queryManager.mutationStore.getStore(),\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true),\n                    });\n                }\n            },\n        });\n    }\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = __assign(__assign({}, this.defaultOptions.watchQuery), options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = __assign(__assign({}, this.defaultOptions.query), options);\n        }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network', 5) : invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' +\n            'client.query can only return a single result. Please use client.watchQuery ' +\n            'to receive multiple results from the cache and the network, or consider ' +\n            'using a different fetchPolicy, such as cache-first or network-only.');\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = __assign(__assign({}, this.defaultOptions.mutate), options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var result = this.cache.writeQuery(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var result = this.cache.writeFragment(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeData = function (options) {\n        var result = this.cache.writeData(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.initQueryManager = function () {\n        process.env.NODE_ENV === \"production\" || invariant.warn('Calling the initQueryManager method is no longer necessary, ' +\n            'and it will be removed from ApolloClient in version 3.0.');\n        return this.queryManager;\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    return ApolloClient;\n}());\n\nexport default ApolloClient;\nexport { ApolloClient, ApolloError, FetchType, NetworkStatus, ObservableQuery, isApolloError };\n//# sourceMappingURL=bundle.esm.js.map\n","import Observable from 'zen-observable-ts';\nexport { default as Observable } from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { __extends, __assign } from 'tslib';\nimport { getOperationName } from 'apollo-utilities';\nexport { getOperationName } from 'apollo-utilities';\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        'query',\n        'operationName',\n        'variables',\n        'extensions',\n        'context',\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"illegal argument: \" + key);\n        }\n    }\n    return operation;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nfunction toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    process.env.NODE_ENV === \"production\" || invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\nvar makePromise = toPromise;\nfunction fromPromise(promise) {\n    return new Observable(function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\nfunction fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== 'string'\n                ? getOperationName(transformedOperation.query)\n                : '';\n    }\n    return transformedOperation;\n}\nfunction createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === 'function') {\n            context = __assign({}, context, next(context));\n        }\n        else {\n            context = __assign({}, context, next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, 'setContext', {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, 'getContext', {\n        enumerable: false,\n        value: getContext,\n    });\n    Object.defineProperty(operation, 'toKey', {\n        enumerable: false,\n        value: function () { return getKey(operation); },\n    });\n    return operation;\n}\nfunction getKey(operation) {\n    var query = operation.query, variables = operation.variables, operationName = operation.operationName;\n    return JSON.stringify([operationName, query, variables]);\n}\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction empty() {\n    return new ApolloLink(function () { return Observable.of(); });\n}\nfunction from(links) {\n    if (links.length === 0)\n        return empty();\n    return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n}\nfunction split(test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n        return new ApolloLink(function (operation) {\n            return test(operation)\n                ? leftLink.request(operation) || Observable.of()\n                : rightLink.request(operation) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return test(operation)\n                ? leftLink.request(operation, forward) || Observable.of()\n                : rightLink.request(operation, forward) || Observable.of();\n        });\n    }\n}\nvar concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n        return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (isTerminating(nextLink)) {\n        return new ApolloLink(function (operation) {\n            return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return (firstLink.request(operation, function (op) {\n                return nextLink.request(op, forward) || Observable.of();\n            }) || Observable.of());\n        });\n    }\n};\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('request is not implemented');\n    };\n    ApolloLink.empty = empty;\n    ApolloLink.from = from;\n    ApolloLink.split = split;\n    ApolloLink.execute = execute;\n    return ApolloLink;\n}());\nfunction execute(link, operation) {\n    return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n}\n\nexport { ApolloLink, concat, createOperation, empty, execute, from, fromError, fromPromise, makePromise, split, toPromise };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}